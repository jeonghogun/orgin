name: Python CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
    - name: Run linters
      run: |
        flake8 app tests
        pyright app

  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    - name: Install Frontend Dependencies and Build
      run: |
        cd app/frontend
        npm ci
        npm run build
    - name: Upload Frontend Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: app/frontend/dist

  test-backend:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: origin_db_test
        ports:
          - 5432:5432
        # Add a healthcheck to wait for the DB to be ready
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install PostgreSQL client and pgvector
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client-16 postgresql-16-pgvector

    - name: Install Python dependencies
      run: |
        pip install -r requirements-dev.txt
        pip install -r requirements.txt

    - name: Run Tests
      env:
        # Use the service container credentials
        DATABASE_URL: postgresql://user:password@localhost:5432/origin_db_test
        REDIS_URL: redis://localhost:6379
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
        AUTH_OPTIONAL: "True"
        OPENAI_API_KEY: "test-key-for-ci"
        GEMINI_API_KEY: "test-key-for-ci"
        ANTHROPIC_API_KEY: "test-key-for-ci"
        DB_ENCRYPTION_KEY: "test-key-for-ci-32-bytes-long"
        PYTHONPATH: .
      run: |
        # Start celery worker in the background
        celery -A app.celery_app worker -P gevent --loglevel=INFO &
        sleep 5 # Give worker time to start
        pytest
