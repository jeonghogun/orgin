name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install flake8 pyright
      - name: Run linters
        run: |
          flake8 app tests
          pyright app
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install frontend dependencies
        working-directory: ./app/frontend
        run: npm ci
      - name: Check frontend for disallowed alerts
        working-directory: ./app/frontend
        run: npm run lint:no-alert

  migration-check:
    runs-on: ubuntu-latest
    needs: lint
    services:
      test-db:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_origin_db
        ports:
          - 5435:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_origin_db"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements-dev.txt
      - name: Apply migrations against ephemeral database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5435/test_origin_db
          DB_ENCRYPTION_KEY: "test-key-for-ci-32-bytes-long"
        run: |
          export PYTHONPATH=$PWD
          alembic upgrade head
      - name: Check for migration consistency
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5435/test_origin_db
          DB_ENCRYPTION_KEY: "test-key-for-ci-32-bytes-long"
        run: |
          export PYTHONPATH=$PWD
          alembic check

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      test-db:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_origin_db
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_origin_db"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      test-redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Python dependencies
        run: pip install -r requirements-dev.txt
      - name: Run Tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5434/test_origin_db
          REDIS_URL: redis://localhost:6380/0
          DB_ENCRYPTION_KEY: "test-key-for-ci-32-bytes-long"
          AUTH_OPTIONAL: "True"
          CELERY_TASK_ALWAYS_EAGER: "True"
          OPENAI_API_KEY: "test-key-for-ci"
          GEMINI_API_KEY: "test-key-for-ci"
          ANTHROPIC_API_KEY: "test-key-for-ci"
          PYTHONPATH: .
        run: ./scripts/run_tests.sh

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install Frontend Dependencies and Build
        working-directory: ./app/frontend
        run: |
          npm ci
          npm run build
      - name: Upload Frontend Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: app/frontend/dist

  build-docker:
    runs-on: ubuntu-latest
    needs: [test, build-frontend, migration-check]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: app/static
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: your-dockerhub-repo/origin-project:latest

  performance-smoke:
    runs-on: ubuntu-latest
    needs: [test]
    services:
      test-db:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_origin_db
        ports:
          - 5436:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_origin_db"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      test-redis:
        image: redis:7-alpine
        ports:
          - 6381:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements-dev.txt
      - name: Apply migrations for performance smoke
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5436/test_origin_db
          DB_ENCRYPTION_KEY: "test-key-for-ci-32-bytes-long"
        run: |
          export PYTHONPATH=$PWD
          alembic upgrade head
      - name: Start API server
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5436/test_origin_db
          REDIS_URL: redis://localhost:6381/0
          DB_ENCRYPTION_KEY: "test-key-for-ci-32-bytes-long"
          AUTH_OPTIONAL: "True"
          OPENAI_API_KEY: "test-key-for-ci"
          GEMINI_API_KEY: "test-key-for-ci"
          ANTHROPIC_API_KEY: "test-key-for-ci"
          PYTHONPATH: .
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          echo $! > uvicorn.pid
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:8000/health >/dev/null; then
              break
            fi
            sleep 2
          done
      - name: Run Locust smoke test
        env:
          LOCUST_HOST: http://127.0.0.1:8000
          LOCUST_JWT_TOKEN: test-jwt-token
        run: |
          ./scripts/run_locust_smoke.sh
      - name: Stop API server
        if: always()
        run: |
          if [ -f uvicorn.pid ]; then
            kill $(cat uvicorn.pid) || true
          fi
